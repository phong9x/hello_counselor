/*
 * Created on 20 thg 12 2016 ( Time 10:30:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.hello.business.service.BusinessService;
import org.trams.hello.business.service.BusinessSubService;
import org.trams.hello.business.service.PaymentHistoryService;
import org.trams.hello.business.service.UserService;
import org.trams.hello.business.service.mapping.BusinessServiceMapper;
import org.trams.hello.business.service.mapping.UserServiceMapper;
import org.trams.hello.rest.common.AbstractRestController;

/**
 * Spring MVC controller for 'Question' management.
 */
@RequestMapping("/v1/public")
@Controller
public class AjaxRestControlor extends AbstractRestController {

	@Resource
	private UserService userService;
	@Resource
	private UserServiceMapper userServiceMapper;
	@Resource
	private BusinessService businessService;
	@Resource
	private PaymentHistoryService paymentHistoryService;
	@Resource
	private BusinessServiceMapper businessServiceMapper;
	
	@Resource
    private BusinessSubService businessSubService;
	
	private final String  COUNT_DISCONNECT = "-count";
	
	private final String  STATUS = "-status";
	
	@RequestMapping( value="/countDisconnect",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> countDisconnect(
			@RequestParam(value = "roomId") String roomId,
			HttpSession session
			) {
		try {
			Integer count = (Integer) session.getAttribute(roomId+COUNT_DISCONNECT);
			if(count == null){
				count =1;
			}else{
				count++;
			}
			session.setAttribute(roomId+COUNT_DISCONNECT, count);
			session.setAttribute(roomId+STATUS, 0);
			return AjaxSuccess(count);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/getCountDisconnect",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getCountDisconnect(
			@RequestParam(value = "roomId") String roomId,
			HttpSession session
			) {
		try {
			
			Integer count = (Integer) session.getAttribute(roomId+COUNT_DISCONNECT);
			if(count == null){
				count =0;
			}
			System.out.println(">>>roomId:"+roomId+" have count:"+count);
			return AjaxSuccess(count);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/getStatusGM",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getStatusGM(
			@RequestParam(value = "roomId") String roomId,
			HttpSession session
			) {
		try {
			
			Integer status = (Integer) session.getAttribute(roomId+STATUS);
			//default value
			if(status == null){
				status = 1;
			}else if(status == 0){
				//reset status to NULL
				session.setAttribute(roomId+STATUS, null);
			}
			System.out.println(">>>roomId:"+roomId+" have status:"+status);
			return AjaxSuccess(status);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/removeCountDisconnect",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> removeCountDisconnect(
			@RequestParam(value = "roomId", defaultValue = "") String roomId,
			HttpSession session
			) {
		try {
			
			session.setAttribute(roomId, null);
			return AjaxSuccess(0);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return AjaxFail();
	}
	
	@RequestMapping( value="/rtc/current",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> getCurrentTime() {
		try {
			Map<String, Object> ret = new HashMap<String, Object>();
            Date now = new Date();
            ret.put("current", now.getTime());
            return AjaxSuccess(ret);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxFail();
		} 
	}

}
