/*
 * Created on 20 thg 12 2016 ( Time 10:30:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.rest.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.trams.hello.bean.*;
import org.trams.hello.bean.jpa.BusinessEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.RequestUserPsychologicalEntity;
import org.trams.hello.bean.jpa.UserEntity;
import org.trams.hello.business.event.FindPasswordEvent;
import org.trams.hello.business.service.*;
import org.trams.hello.business.service.mapping.CategoryServiceMapper;
import org.trams.hello.business.service.mapping.ReportDailyServiceMapper;
import org.trams.hello.business.service.mapping.UserServiceMapper;
import org.trams.hello.common.mail.Mail;
import org.trams.hello.rest.common.AbstractRestController;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.Login;
import org.trams.hello.web.common.utils.EncryptionUtils;
import org.trams.hello.web.common.utils.FileUtils;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.text.SimpleDateFormat;
import java.util.*;


/**
 * Spring MVC controller for 'Question' management.
 */
@RequestMapping("/v1/public")
@Controller
public class PublicRestControlor extends AbstractRestController {

    @Resource
    private ReportDailyService reportDailyService;
    @Resource
    private RequestUserPsychologicalService requestUserPsychologicalService;
    @Resource
    private ReportDailyServiceMapper reportDailyServiceMapper;
    @Resource
    private CounselorService counselorService;
    @Resource
    private UserService userService;
    @Resource
    private UserServiceMapper userServiceMapper;
    @Resource
    private UserNotificationService userNotificationService;
    @Resource
    private DeviceService deviceService;
    @Resource
    private NotificationService notificationService;
    @Resource
    private PromotionPageService promotionPageService;
    @Resource
    private CategoryService categoryService;
    @Resource
    private CategoryServiceMapper categoryServiceMapper;
    @Resource
    private InquiryService inquiryService;
    @Resource
    private VersionAppService versionAppService;
    @Resource
    private UserPsychologicalService userPsychologicalService;
    @Resource
    private ServletContext servletContext;
    @Resource
    private MessageService messageService;
    @Resource
    private UserPsychologicalFileService userPsychologicalFileService;
    @Resource
    private UserReceiveMessageService userReceiveMessageService;
    @Autowired
    private PasswordHistoryService passwordHistoryService;
    @Autowired
    private BusinessService businessService;

    @Autowired
    private ApplicationEventPublisher applicationEventPublisher;


    @RequestMapping(value = "/inquiry/counsoler/write", method = {RequestMethod.POST, RequestMethod.GET})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> writeInquiryCW(@RequestParam Map<String, Object> params, HttpServletRequest httpRequest, HttpSession httpSession) {
        try {
            HashMap<String, Object> ret = new HashMap<String, Object>();
            String email = String.valueOf(params.get("email").toString());
            Integer categoryId = Integer.valueOf(params.get("categoryId").toString());
            String content = String.valueOf(params.get("content").toString());

            //Mail.sendEmail("hello_counselor@aimmed.com", content);

            Inquiry i = new Inquiry();
            i.setCreateDate(new Date());
            i.setQuestion(content);
            i.setStatus(0);
            i.setTypeUser(2);
            i.setUpdateDate(new Date());
            i.setCategoryId(categoryId);
            UserItem userItem = Login.getLoggedInUser(httpSession);
			i.setAskUserId(userItem.getId());
            i.setAskEmail(email);

            i = inquiryService.create(i);

            return SUCCESS(ret);
        } catch (Exception e) {
            e.printStackTrace();
            return ERROR(e.getMessage());
        }
    }

    /*
     * counselor web
     */
    @RequestMapping(value = "/ajax_save_psychological ", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> delivery_ajax_change_status(
            @RequestParam(value = "user_id", defaultValue = "") Integer user_id,
            @RequestParam(value = "test_name", defaultValue = "") String test_name,
            @RequestParam(value = "total_fee", defaultValue = "") Integer total_fee,
            @RequestParam(value = "counselor_id", defaultValue = "") Integer counselor_id,
            @RequestParam(value = "count_test_name", defaultValue = "") Integer count_test_name, HttpSession httpSession, HttpServletRequest httpRequest) {
        try {
            List<Integer> testIds = new ArrayList<>();
            test_name.replace("[", "");
            test_name.replace("]", "");
            for (String e : test_name.split(",")) {
                e = e.replace("[", "");
                e = e.replace("]", "");
                e = e.substring(1, e.length() - 1);
                testIds.add(Integer.valueOf(e));
            }

            RequestUserPsychological r = new RequestUserPsychological();
            Calendar currentDate = Calendar.getInstance();
            r.setCounselorId(counselor_id);
            r.setUserId(user_id);
            r.setRequestPsychological(currentDate.getTime());
            r.setStatus((short) 0);
            r.setCreateDate(currentDate.getTime());
            r.setUpdateDate(currentDate.getTime());
            currentDate.add(Calendar.DATE, 3);
            currentDate.set(Calendar.HOUR_OF_DAY, 23);
            currentDate.set(Calendar.MINUTE, 59);
            currentDate.set(Calendar.SECOND, 59);
            r.setEffectPaymentPsychological(currentDate.getTime());
            r.setPaymentId(null);
            r.setFee(total_fee);
            r = requestUserPsychologicalService.create(r);
            for (Integer testId : testIds) {
                UserPsychological u = new UserPsychological();
                u.setUserId(user_id);
                u.setCounselorId(counselor_id);
                u.setCreateDate(new Date());
                u.setUpdateDate(new Date());
                u.setPsychologicalTestId(testId);
                u.setRequestPsychologicalId(r.getId());
                u = userPsychologicalService.create(u);
            }
            try {
                UserEntity u = userService.findOne(user_id);
                CounselorEntity c = counselorService.findByOne(counselor_id);
                notificationService.createNotification(u, u.getUsername(), "심리검사 결제 안내", c.getUser().getFullname() + "심리상담사가 요청한 심리검사를 결제해주세요.", null, (short) ApplicationDefine.Notification_Type.PsychologicalTest.getCode(), null);
                
            } catch (Exception e) {
                e.printStackTrace();
            }


            return SUCCESS();
        } catch (Exception e) {
            return FAIL("HAVE ERROR: " + e);
        }
    }

    @RequestMapping(value = "/ajax_upload_pdf_psychological ", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> ajax_upload_pdf_psychological(
            @RequestParam(value = "fullPath") MultipartFile file,
            @RequestParam(value = "userPsyTestId", defaultValue = "") Integer userPsyTestId,
            @RequestParam(value = "testName", defaultValue = "") String testName,
            @RequestParam(value = "userPsyFileId", defaultValue = "") Integer userPsyFileId, HttpSession httpSession, HttpServletRequest httpRequest) {
        try {
            SimpleDateFormat sf = new SimpleDateFormat("yyyyMMdd");
            String url = "";
            String resultTestName = testName + "_" + sf.format(new Date()) + ".pdf";
            UserPsychologicalFile u = new UserPsychologicalFile();
            if (file != null && file.getSize() > 0) {
                url = FileUtils.saveFileOrigin(file, servletContext);

                if (userPsyFileId != 0) {
                    u = userPsychologicalFileService.findById(userPsyFileId);
                    u.setFileUrl(url);
                    u.setCreateDate(new Date());
                    u.setFileName(resultTestName);
                    u = userPsychologicalFileService.update(u);
                } else {
                    u.setUserPsychologicalId(userPsyTestId);
                    u.setFileUrl(url);
                    u.setFileName(resultTestName);
                    u.setCreateDate(new Date());
                    u.setCreateDate(new Date());
                    u = userPsychologicalFileService.create(u);
                }
                try {
                    UserPsychological psy = userPsychologicalService.findById(userPsyTestId);
                    UserEntity user = userService.findOne(psy.getUserId());
                    User counselor = userService.findById(psy.getCounselorId());
                    if (user.getSettingAll() == 1 || user.getMessageNotification() == 1) {
                        notificationService.createNotification(user, user.getUsername(), "심리검사 결과 확인", counselor.getFullname()+"심리상담사가 "+user.getFullname()+"님의 심리검사 결과를 등록하였습니다.", null, (short) ApplicationDefine.Notification_Type.PsychologicalResult.getCode(), null);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            return SUCCESS();
        } catch (Exception e) {
            return FAIL("HAVE ERROR: " + e);
        }
    }

    @RequestMapping(value = "/ajax_cancel_psychological ", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> ajax_cancel_psychological(
            @RequestParam(value = "userPsyFileId", defaultValue = "") Integer userPsyFileId, HttpSession httpSession, HttpServletRequest httpRequest) {
        try {
            RequestUserPsychological r = requestUserPsychologicalService.findById(userPsyFileId);
            r.setStatus((short) 4);
            r.setUpdateDate(new Date());
            r = requestUserPsychologicalService.update(r);
            try {
                RequestUserPsychologicalEntity request = requestUserPsychologicalService.findByIdEntity(r.getId());
                notificationService.createNotification(request.getUser(), request.getUser().getUsername(), "심리검사 요청 취소 안내", request.getCounselor().getUser().getFullname() + "심리상담사가 심리검사 요청을 취소하였습니다.", null, (short) ApplicationDefine.Notification_Type.CancelRequestPsychologicalTest.getCode(), null);
            } catch (Exception e) {
                e.printStackTrace();
            }

            return SUCCESS();
        } catch (Exception e) {
            return FAIL("HAVE ERROR: " + e);
        }
    }

    //push message
    @RequestMapping(value = "/ajax_send_email_psychological ", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> ajax_send_email_psychological(
            @RequestParam(value = "content_mess", defaultValue = "") String content_mess,
            @RequestParam(value = "email", defaultValue = "") String email,
            @RequestParam(value = "userId", defaultValue = "") Integer userId, HttpSession httpSession, HttpServletRequest httpRequest) {
        Message m = new Message();
        UserReceiveMessage u = new UserReceiveMessage();
        try {
            UserItem userItem = Login.getLoggedInUser(httpSession);
            m.setSendUserId(userItem.getId());
            m.setContent(content_mess);
            m.setTypeUser(0);
            m.setSendDate(new Date());
            m.setRecieveDate(new Date());
            m.setCreateDate(new Date());
            m.setUpdateDate(new Date());
            m = messageService.create(m);


            u.setUserId(userId);
            u.setMessageId(m.getId());
            u.setStatus((short) 0);
            u.setCreateDate(new Date());
            u.setUpdateDate(new Date());

            u = userReceiveMessageService.create(u);
            try {
                UserEntity user = userService.findOne(userId);
                CounselorEntity counselor = counselorService.findByOne(userItem.getId());
                if (user.getSettingAll() == 1 || user.getMessageNotification() == 1) {
                    notificationService.createNotification(user, user.getUsername(), counselor.getUser().getFullname() + "심리상담사 쪽지", content_mess, m.getId(), (short) ApplicationDefine.Notification_Type.Message.getCode(), null);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return SUCCESS();
        } catch (Exception e) {
            if (m != null) {
                messageService.delete(m.getId());
            }
            return FAIL("HAVE ERROR: " + e);
        }
    }

    @RequestMapping(value = "/ajax_delete_message_list", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> ajax_delete_message_list(
            @RequestParam(value = "ids", defaultValue = "") String searchIDs,
            HttpSession httpSession, HttpServletRequest httpRequest) {
        try {
            List<Integer> Ids = new ArrayList<>();
            searchIDs.replace("[", "");
            searchIDs.replace("]", "");
            for (String e : searchIDs.split(",")) {
                e = e.replace("[", "");
                e = e.replace("]", "");
                e = e.substring(1, e.length() - 1);
                if (!e.equals("0")) {
                    Ids.add(Integer.valueOf(e));
                }
            }

            for (Integer i : Ids) {
                messageService.updateIsDeleteByMessageId(i);
            }
            return SUCCESS();
        } catch (Exception ex) {
            return FAIL("HAVE ERROR: " + ex);
        }
    }

    //push message
    @RequestMapping(value = "/ajax_send_message_detail", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> ajax_send_message_detail(
            @RequestParam(value = "dataUserId", defaultValue = "") Integer dataUserId,
            @RequestParam(value = "content", defaultValue = "") String content,
            HttpSession httpSession, HttpServletRequest httpRequest) {
        Message m = new Message();
        UserReceiveMessage u = new UserReceiveMessage();
        try {
            UserItem userItem = Login.getLoggedInUser(httpSession);
            m.setSendUserId(userItem.getId());
            m.setContent(content);
            m.setTypeUser(0);
            m.setSendDate(new Date());
            m.setRecieveDate(new Date());
            m.setCreateDate(new Date());
            m.setUpdateDate(new Date());
            m.setIsDelete((short)0);
            m = messageService.create(m);
            u.setUserId(dataUserId);
            u.setMessageId(m.getId());
            u.setStatus((short) 0);
            u.setCreateDate(new Date());
            u.setUpdateDate(new Date());

            u = userReceiveMessageService.create(u);
            try {
                UserEntity user = userService.findOne(dataUserId);
                CounselorEntity counselor = counselorService.findByOne(userItem.getId());
                if (user.getSettingAll() == 1 || user.getMessageNotification() == 1) {
                    notificationService.createNotification(user, user.getUsername(), counselor.getUser().getFullname() + "심리상담사 쪽지", String.valueOf(content), u.getId(), (short) ApplicationDefine.Notification_Type.Message.getCode(), null);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return SUCCESS();
        } catch (Exception ex) {
            if (m != null) {
                messageService.delete(m.getId());
            }
            return FAIL("HAVE ERROR: " + ex);
        }
    }

    @RequestMapping(value = "/ajax_changepassword ", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> ajax_send_email_psychological(
            @RequestParam(value = "current_password", defaultValue = "") String current_password,
            @RequestParam(value = "new_password", defaultValue = "") String new_password, HttpSession session, HttpServletRequest httpRequest) {
        UserItem userItem = Login.getLoggedInUser(session);
        PasswordHistory p = new PasswordHistory();
        User u = userService.findById(userItem.getId());
        try {
            HashMap<String, Object> ret = new HashMap<>();
            String currentPasswordConvert = EncryptionUtils.jwtBuild(current_password);
            String newPasswordConvert = EncryptionUtils.jwtBuild(new_password);
            if (!(u.getPassword().equals(currentPasswordConvert))) {
                ret.put("statusPopup", 1);
            } else {
                Integer countNewPwdInDatabase = passwordHistoryService.countChangedPass(userItem.getId(), newPasswordConvert);
                if (countNewPwdInDatabase >= 2) {
                    ret.put("statusPopup", 2);
                } else {
                    p.setUserId(u.getId());
                    p.setPassword(newPasswordConvert);
                    p.setCreateDate(new Date());
                    p.setUpdateDate(new Date());
                    p = passwordHistoryService.create(p);

                    u.setPassword(newPasswordConvert);
                    u.setUpdateDate(new Date());
                    u = userService.update(u);
                    ret.put("statusPopup", 3);

                    applicationEventPublisher.publishEvent(new FindPasswordEvent(this, u.getPhone(), new_password));
                }
            }
            return SUCCESS(ret);
        } catch (Exception e) {
            e.printStackTrace();
            if (p != null) {
                passwordHistoryService.delete(p.getId());
            }
            return null;
        }
    }

    @RequestMapping(value = "/ajax_update_status_message", method = {RequestMethod.POST, RequestMethod.GET}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public HashMap<String, Object> ajax_update_status_message(
            @RequestParam(value = "mess_id", defaultValue = "") Integer mess_id, HttpSession session, HttpServletRequest httpRequest) {
        UserReceiveMessage um = userReceiveMessageService.findById(mess_id);
        try {
            if (um.getStatus() == 0) {
                um.setStatus((short) 1);
                um.setUpdateDate(new Date());
                um = userReceiveMessageService.update(um);
            }

            return SUCCESS();
        } catch (Exception e) {
            e.printStackTrace();
            return FAIL();
        }
    }

    @RequestMapping(value = "/counselor/status", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public HashMap<String, Object> checkCounselorStatus(
            @RequestParam List<Integer> counselorIds
    ) {
        Map<Integer, Integer> counselorsStatus = new HashMap<>();

        for (Integer counselorId : counselorIds) {
            HttpSession session = Login.getCounselorLoggedIn().get(counselorId);
            counselorsStatus.put(counselorId, session != null ? (session.getId() != null ? 1 : 0) : 0);
        }

        return SUCCESS(counselorsStatus);
    }
}
