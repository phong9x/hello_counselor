/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang.ArrayUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.Counselor;
import org.trams.hello.bean.jpa.CounselingCenterEntity;
import org.trams.hello.bean.jpa.CounselingSessionEntity;
import org.trams.hello.bean.jpa.CounselorEntity;
import org.trams.hello.bean.jpa.PaymentHistoryEntity;
import org.trams.hello.bean.jpa.PaymentProfitEntity;
import org.trams.hello.bean.web.counselor.SuggestionCounselor;
import org.trams.hello.business.service.CounselorService;
import org.trams.hello.business.service.mapping.CounselorServiceMapper;
import org.trams.hello.data.repository.jpa.CounselingSessionJpaRepository;
import org.trams.hello.data.repository.jpa.CounselorFieldJpaRepository;
import org.trams.hello.data.repository.jpa.CounselorJpaRepository;
import org.trams.hello.data.repository.jpa.PaymentProfitJpaRepository;
import org.trams.hello.web.common.ApplicationDefine;
import org.trams.hello.web.common.utils.DataUtils;

/**
 * Implementation of CounselorService
 */
@Component
@Transactional
public class CounselorServiceImpl implements CounselorService {

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private CounselorJpaRepository counselorJpaRepository;
	@Resource
	private CounselorFieldJpaRepository counselorFieldJpaRepository;
	@Resource
	private CounselorServiceMapper counselorServiceMapper;
	@Resource
	private CounselingSessionJpaRepository counselingSessionJpaRepository;
	@Resource
	private PaymentProfitJpaRepository paymentProfitJpaRepository;

	@Override
	public Counselor findById(Integer id) {
		CounselorEntity counselorEntity = counselorJpaRepository.findOne(id);
		return counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntity);
	}

	@Override
	public CounselorEntity findByOne(Integer id) {
		return counselorJpaRepository.findOne(id);
	}

	@Override
	public Page<CounselorEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return counselorJpaRepository.findAll(request);
	}

	@Override
	public List<Counselor> findAll() {
		Iterable<CounselorEntity> entities = counselorJpaRepository.findAll();
		List<Counselor> beans = new ArrayList<Counselor>();
		for (CounselorEntity counselorEntity : entities) {
			beans.add(counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = counselorJpaRepository.count();
		return count;
	}

	@Override
	public Counselor save(Counselor counselor) {
		return update(counselor);
	}

	@Override
	public Counselor create(Counselor counselor) {
		/*
		 * CounselorEntity counselorEntity =
		 * counselorJpaRepository.findOne(counselor.getId()); if(
		 * counselorEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * counselorEntity = new CounselorEntity();
		 * counselorServiceMapper.mapCounselorToCounselorEntity(counselor,
		 * counselorEntity); CounselorEntity counselorEntitySaved =
		 * counselorJpaRepository.save(counselorEntity); return
		 * counselorServiceMapper.mapCounselorEntityToCounselor(
		 * counselorEntitySaved);
		 */
		CounselorEntity counselorEntity = new CounselorEntity();
		counselorServiceMapper.mapCounselorToCounselorEntity(counselor, counselorEntity);
		CounselorEntity counselorEntitySaved = counselorJpaRepository.save(counselorEntity);
		return counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntitySaved);
	}

	@Override
	public Counselor update(Counselor counselor) {
		CounselorEntity counselorEntity = counselorJpaRepository.findOne(counselor.getId());
		counselorServiceMapper.mapCounselorToCounselorEntity(counselor, counselorEntity);
		CounselorEntity counselorEntitySaved = counselorJpaRepository.save(counselorEntity);
		return counselorServiceMapper.mapCounselorEntityToCounselor(counselorEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselorJpaRepository.delete(id);
	}

	public CounselorJpaRepository getCounselorJpaRepository() {
		return counselorJpaRepository;
	}

	public void setCounselorJpaRepository(CounselorJpaRepository counselorJpaRepository) {
		this.counselorJpaRepository = counselorJpaRepository;
	}

	public CounselorServiceMapper getCounselorServiceMapper() {
		return counselorServiceMapper;
	}

	public void setCounselorServiceMapper(CounselorServiceMapper counselorServiceMapper) {
		this.counselorServiceMapper = counselorServiceMapper;
	}

	@Override
	public Page<CounselorEntity> listPagingByStatus(Short status,Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listPagingByStatus(status, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void update_isDelete(Integer id) {
		try {
			counselorJpaRepository.update_isDelete(id);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public Page<CounselorEntity> listPagingBy_NickNameOrIntroduceAndStatus(String key, Short status, Short actived, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listPagingBy_NickNameOrIntroduceAndStatus("%" + key + "%", status, actived, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> listPagingBy_CounlorFieldAndStatus(Integer[] counselor_field, Short actived, Short status, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "counselor.createDate")));
			return counselorJpaRepository.listPagingBy_CounlorFieldAndStatus(counselor_field, actived, status, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Page<CounselorEntity> listSuggetPagingBy_CounlorFieldAndStatus(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listSuggetPagingBy_CounlorFieldAndStatus(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> listPagingBy_CounlorFieldAndNickNameAndIntroduceAndStatus(Integer[] counselor_field, String key, Short actived, Short status,
			Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listPagingBy_CounlorFieldAndNickNameAndIntroduceAndStatus(counselor_field,
					"%" + key + "%", actived, status, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Integer> totalCounselorHome(Integer hour, Short[] status) {
		try {
			List<Object[]> list_result = counselorJpaRepository.toalCounselorHome("%"+hour+";%", "%;"+hour+"%", status);
			List<Integer> list = new ArrayList<>();
			Object[] ob = list_result.get(0);
			for (Object i : ob) {
				list.add(DataUtils.parseInt(i));
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> filter(Integer[] role, Integer counselorCenterId, Short[] actived, Integer[] age,
			Short[] statusActive, Short[] aimmedRecommend, String type, String key, Integer[] counselorFieldId,
			String orderBy, Integer page, Integer size) {
		Specification<CounselorEntity> spec = new Specification<CounselorEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselorEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (role.length > 0 && role.length < 2) {
					for (Integer i : role) {
						Predicate predicate = cb.equal(root.get("user").get("userRole").get("id"), i);
						predicates.add(predicate);
					}
				} 
				
				if(counselorCenterId != null){
					List<Predicate> list_role = new ArrayList<>();
					if(ArrayUtils.contains(role, ApplicationDefine.USER_ROLE_MEMBER_BUSSINESS)){
						Predicate predicate1 = cb.equal(root.get("counselorCenter").get("id"), counselorCenterId);
						Predicate predicate2 = cb.equal(root.get("user").get("userRole").get("id"), ApplicationDefine.USER_ROLE_COUNSELOR_IN_CENTER);
						Predicate andPre = cb.and(predicate1, predicate2);
						list_role.add(andPre);
					}
					if(ArrayUtils.contains(role, ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE)){
						Predicate predicate = cb.equal(root.get("user").get("userRole").get("id"), ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE);
						list_role.add(predicate);
					}
					Predicate predicateRole = cb.or(list_role.toArray(new Predicate[] {}));
					predicates.add(predicateRole);
				}else if(role.length > 0){
					predicates.add(cb.isTrue(root.get("user").get("userRole").get("id").in(role)));
				}
				
				if (actived.length > 0) {
					predicates.add(cb.isTrue(root.get("actived").in(actived)));
				}
				
				if (aimmedRecommend.length > 0 ) {
					predicates.add(cb.isTrue(root.get("aimmedRecommend").in(aimmedRecommend)));
				}
				
				if (age.length > 0) {
					Predicate predicateAge = null;
					List<Predicate> list_predicate = new ArrayList<>();
					Calendar c =Calendar.getInstance();
					for (Integer i : age) {
						Integer startYear = c.get(Calendar.YEAR);
						Integer endYear = c.get(Calendar.YEAR);
						if(i ==1){
							startYear =startYear - 20;
							Predicate predicate = cb.greaterThanOrEqualTo(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),startYear );
							list_predicate.add(predicate);
						}else if (i == 5){
							endYear = endYear - 50;
							Predicate predicate = cb.lessThanOrEqualTo(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),endYear );
							list_predicate.add(predicate);
						}else{
							i++;
							startYear = startYear -(i*10);
							endYear = endYear -(i*10 - 10);
							Predicate predicate1 = cb.greaterThanOrEqualTo(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),startYear );
							Predicate predicate2 = cb.lessThan(cb.function("year", Integer.class, root.get("user").get("dayOfBirth")),endYear );
							Predicate andPre = cb.and(predicate1, predicate2);
							list_predicate.add(andPre);
						}
					}
					predicateAge = cb.or(list_predicate.toArray(new Predicate[] {}));
					predicates.add(predicateAge);
				}

				if (statusActive.length > 0) {
					Predicate predicateStatus = null;
					List<Predicate> list_predicate = new ArrayList<>();
					if(ArrayUtils.contains(statusActive, (short)0)){
						Predicate predicate1 = cb.equal(root.get("status"), ApplicationDefine.Counselor_Status.NormalDisplay.getCode());
						Predicate predicate2 = cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.NORMAL.getCode());
						Predicate andPre = cb.and(predicate1, predicate2);
						list_predicate.add(andPre);
						
					}
					if(ArrayUtils.contains(statusActive, (short)1)){
						Predicate predicate1 =cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.BANNED.getCode());
						list_predicate.add(predicate1);
						
					}
					if(ArrayUtils.contains(statusActive, (short)2)){
						Predicate predicate1 = cb.equal(root.get("status"), ApplicationDefine.Counselor_Status.NormalNotDisplay.getCode());
						Predicate predicate2 = cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.NORMAL.getCode());
						Predicate andPre = cb.and(predicate1, predicate2);
						list_predicate.add(andPre);
						
					}
					if(ArrayUtils.contains(statusActive, (short)3)){
						Predicate predicate1 = cb.equal(root.get("user").get("statusActive"), ApplicationDefine.UserStatusActive.WITHDRAWAL.getCode());
						list_predicate.add(predicate1);
						
					}
					predicateStatus = cb.or(list_predicate.toArray(new Predicate[] {}));
					predicates.add(predicateStatus);
				}else{
					Short[] statusActive = new Short[2];
					statusActive[0] = ApplicationDefine.Counselor_Status.NormalDisplay.getCode();
					statusActive[1] = ApplicationDefine.Counselor_Status.NormalNotDisplay.getCode();
					predicates.add(cb.isTrue(root.get("status").in(statusActive)));
				}

				if (counselorFieldId.length > 0 && counselorFieldId.length < 15) {
					Predicate predicate = null;
					Integer[] counselorFields = counselorFieldJpaRepository.getCounselorIdBy_CouselorFieldId(counselorFieldId);
					predicate = cb.isTrue(root.get("id").in(counselorFields));
					predicates.add(predicate);
				}

				if (key != null) {
					if (type.equals("id")) {
						Predicate predicate = cb.like(root.get("user").get("username"), key);
						predicates.add(predicate);
					} else if (type.equals("counselor_name")) {
						Predicate predicate = cb.like(root.get("user").get("fullname"), key);
						predicates.add(predicate);
					}
				}
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};
		Order oder = new Order(Direction.DESC, orderBy);
		if(orderBy.equals("user.fullname")){
			 oder = new Order(Direction.ASC, orderBy);
		}
		
		PageRequest pageable = new PageRequest(page - 1, size, new Sort(oder));
		return counselorJpaRepository.findAll(spec, pageable);
	}

	@Override
	public Page<CounselorEntity> listPagingCounselorNotActive(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listPagingCounselorNotActive(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<CounselorEntity> filter(Integer[] role, Integer centerId, Short[] status, String key, String type,
			Integer page, Integer size) {

		Specification<CounselorEntity> spec = new Specification<CounselorEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselorEntity> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();

				if (role.length == 1) {
					for (Integer i : role) {
						Predicate predicate = cb.equal(root.get("user").get("userRole").get("id"), i);
						predicates.add(predicate);
					}
				} else {
					Predicate predicate = cb.or(
							cb.equal(root.get("user").get("userRole").get("id"),
									ApplicationDefine.USER_ROLE_COUNSELOR_IN_CENTER),
							cb.equal(root.get("user").get("userRole").get("id"),
									ApplicationDefine.USER_ROLE_COUNSELOR_FREELANCE));
					predicates.add(predicate);
				}
				if (centerId != null) {
					Predicate predicate = cb.equal(root.get("counselingCenter").get("id"), centerId);
					predicates.add(predicate);
				}

				if (status.length == 1) {
					Predicate predicate = cb.equal(root.get("status"), status[0]);
					predicates.add(predicate);
				} else {
					Predicate predicate = cb.or(cb.equal(root.get("status"), 0), cb.equal(root.get("status"), 3));
					predicates.add(predicate);
				}

				if (key != "" && key != null) {
					if (type.equals("fullname")) {
						Predicate predicate = cb.equal(root.get("user").get("fullname"), key);
						predicates.add(predicate);
					} else if (type.equals("guidance_username")) {
						Predicate predicate = cb.like(root.get("guidanceUsername"), key);
						predicates.add(predicate);
					}
				}
				return cb.and(predicates.toArray(new Predicate[] {}));
			}

		};

		Order oder = new Order(Direction.DESC, "createDate");
		PageRequest pageable = new PageRequest(page - 1, size, new Sort(oder));
		return counselorJpaRepository.findAll(spec, pageable);
	}

	@Override
	public List<SuggestionCounselor> counselorsByCategorySelected(String categoryIds) {
		List<Object[]> rs = counselorJpaRepository.counselorsByCategorySelected("%"+categoryIds+"%");
		List<SuggestionCounselor> list = new ArrayList<>(); 
		for (Object[] objects : rs) {
			SuggestionCounselor s = new SuggestionCounselor();
			CounselorEntity centity = new CounselorEntity();
			centity.setId((Integer) objects[0]);
			centity.setThumbnailUrl((String) objects[1]);
			s.setCounselorEntity(centity);
			s.setFullName((String) objects[2]);
			s.setCategories((String) objects[3]);
			list.add(s);
		}
		
		return list;
	}

	@Override
	public Integer totalCounlingByCounselorId(Integer counselorId) {
		try {
			return counselorJpaRepository.totalCounlingByCounselorId(counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public void calculateProfit() {

		// filter params
		Calendar now = Calendar.getInstance();

		now.set(Calendar.HOUR_OF_DAY, 0);
		now.set(Calendar.MINUTE, 0);
		now.set(Calendar.SECOND, 0);

		Date startDate = now.getTime();

		now.set(Calendar.HOUR_OF_DAY, 23);
		now.set(Calendar.MINUTE, 59);
		now.set(Calendar.SECOND, 59);

		Date endDate = now.getTime();

		now = Calendar.getInstance();
		Date currentDate = now.getTime();

		Short[] sessionStatuses = {ApplicationDefine.CounselingSessionStatus.COUNSELD.getCode()};

		int year 	= now.get(Calendar.YEAR);
		int month 	= now.get(Calendar.MONTH) + 1;

		// fetch all counselor
		Iterable<CounselorEntity> counselorIterable = counselorJpaRepository.findAll();
		for (Iterator<CounselorEntity> counselorIterator = counselorIterable.iterator(); counselorIterator.hasNext(); ) {

			CounselorEntity counselorEntity = counselorIterator.next();
			PaymentProfitEntity paymentProfitEntity;

			if (counselorEntity.getCounselingCenter() != null) {
				CounselingCenterEntity counselingCenter = counselorEntity.getCounselingCenter();
				paymentProfitEntity = paymentProfitJpaRepository.findByCounselorAndTime(year, month, counselingCenter.getUser().getId(), (short) 2, ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
			} else {
				paymentProfitEntity = paymentProfitJpaRepository.findByCounselorAndTime(year, month, counselorEntity.getId(), (short) 1, ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
			}

			if (paymentProfitEntity == null) {
				paymentProfitEntity = new PaymentProfitEntity();
				paymentProfitEntity.setUser(counselorEntity.getCounselingCenter() == null ? counselorEntity.getUser() : counselorEntity.getCounselingCenter().getUser());
				paymentProfitEntity.setName(counselorEntity.getCounselingCenter() == null ? counselorEntity.getUser().getFullname() : counselorEntity.getCounselingCenter().getCenterName());
				paymentProfitEntity.setMonth(month);
				paymentProfitEntity.setYear(year);
				paymentProfitEntity.setCoin(0);
				paymentProfitEntity.setVoucher(0);
				paymentProfitEntity.setPercent(counselorEntity.getCounselingCenter() == null ? counselorEntity.getProfitPercent() : counselorEntity.getCounselingCenter().getProfitPercent());
				paymentProfitEntity.setTax(3.3F);
				paymentProfitEntity.setAdminRefund(0);
				paymentProfitEntity.setStatus(ApplicationDefine.PaymentProfitStatus.PENDING.getCode());
				paymentProfitEntity.setType(counselorEntity.getCounselingCenter() == null ? (short) 1 : (short) 2);
				paymentProfitEntity.setCreateDate(currentDate);
				paymentProfitEntity.setUpdateDate(currentDate);
				paymentProfitJpaRepository.save(paymentProfitEntity);
			}

			// fetch all completed session of the counselor within today
			List<CounselingSessionEntity> todaySessions = counselingSessionJpaRepository.filterByDate(counselorEntity.getId(), startDate, endDate, sessionStatuses);

			for (CounselingSessionEntity cse : todaySessions) {

				PaymentHistoryEntity paymentHistory = cse.getPaymentHistory();

				if (paymentHistory != null
						&& paymentHistory.getStatus().equals((short) 1)
						&& paymentHistory.getTypePayment().equals(2)
						&& (paymentHistory.getTypeCoin().equals((short) 1) || paymentHistory.getTypeCoin().equals((short) 3))) {

					paymentProfitEntity.setCoin(paymentProfitEntity.getCoin() + (paymentHistory.getCoin() == null ? 0 : paymentHistory.getCoin()));
					paymentProfitEntity.setVoucher(paymentProfitEntity.getVoucher() + (paymentHistory.getCoin() == null ? 0 : paymentHistory.getCoin()));
					paymentProfitEntity.setProfit((int) ((paymentProfitEntity.getCoin() + paymentProfitEntity.getVoucher()) * paymentProfitEntity.getPercent()));
					paymentProfitEntity.setAdminRefund((int) (paymentProfitEntity.getProfit() * paymentProfitEntity.getTax()));

				}

			}

			paymentProfitJpaRepository.save(paymentProfitEntity);
		}
	}

	@Override
	public Page<CounselorEntity> listPagingByStatusAndActived(Short status, Short actived, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselorJpaRepository.listPagingByStatusAndActived(status, actived, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}
}
