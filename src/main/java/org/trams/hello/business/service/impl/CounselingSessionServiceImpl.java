/*
 * Created on 23 thg 11 2016 ( Time 13:38:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigInteger;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.CounselingSession;
import org.trams.hello.bean.PageCustom;
import org.trams.hello.bean.api.MyReservation;
import org.trams.hello.bean.jpa.CounselingSessionEntity;
import org.trams.hello.bean.jpa.ReservationEntity;
import org.trams.hello.bean.web.counselor.UserCounselingSession;
import org.trams.hello.business.service.CounselingSessionService;
import org.trams.hello.business.service.PaymentHistoryService;
import org.trams.hello.business.service.mapping.CounselingSessionServiceMapper;
import org.trams.hello.data.repository.jpa.CounselingSessionJpaRepository;
import org.trams.hello.web.common.ApplicationDefine;

/**
 * Implementation of CounselingSessionService
 */
@Component
@Transactional
public class CounselingSessionServiceImpl implements CounselingSessionService {

	@Resource
	private CounselingSessionJpaRepository counselingSessionJpaRepository;

	private static final Integer PAGE_SIZE = 15;

	@Resource
	private CounselingSessionServiceMapper counselingSessionServiceMapper;
	
	@Resource
	private PaymentHistoryService paymentHistoryService;

	@Autowired
	private EntityManager em;

	@Override
	public CounselingSession findById(Integer id) {
		CounselingSessionEntity counselingSessionEntity = counselingSessionJpaRepository.findOne(id);
		return counselingSessionServiceMapper.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity);
	}
	
	@Override
	public CounselingSessionEntity findOne(Integer id) {
		return counselingSessionJpaRepository.findOne(id);
	}

	@Override
	public Page<CounselingSessionEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
		return counselingSessionJpaRepository.findAll(request);
	}

	@Override
	public List<CounselingSession> findAll() {
		Iterable<CounselingSessionEntity> entities = counselingSessionJpaRepository.findAll();
		List<CounselingSession> beans = new ArrayList<CounselingSession>();
		for (CounselingSessionEntity counselingSessionEntity : entities) {
			beans.add(counselingSessionServiceMapper
					.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * 
	 * @return Long
	 */
	public Long countTotal() {
		Long count = counselingSessionJpaRepository.count();
		return count;
	}

	@Override
	public CounselingSession save(CounselingSession counselingSession) {
		return update(counselingSession);
	}

	@Override
	public CounselingSession create(CounselingSession counselingSession) {
		/*
		 * CounselingSessionEntity counselingSessionEntity =
		 * counselingSessionJpaRepository.findOne(counselingSession.getId());
		 * if( counselingSessionEntity != null ) { throw new
		 * IllegalStateException("already.exists"); }
		 * 
		 * counselingSessionEntity = new CounselingSessionEntity();
		 * counselingSessionServiceMapper.
		 * mapCounselingSessionToCounselingSessionEntity(counselingSession,
		 * counselingSessionEntity); CounselingSessionEntity
		 * counselingSessionEntitySaved =
		 * counselingSessionJpaRepository.save(counselingSessionEntity); return
		 * counselingSessionServiceMapper.
		 * mapCounselingSessionEntityToCounselingSession(
		 * counselingSessionEntitySaved);
		 */
		CounselingSessionEntity counselingSessionEntity = new CounselingSessionEntity();
		counselingSessionServiceMapper.mapCounselingSessionToCounselingSessionEntity(counselingSession,
				counselingSessionEntity);
		CounselingSessionEntity counselingSessionEntitySaved = counselingSessionJpaRepository
				.save(counselingSessionEntity);
		return counselingSessionServiceMapper
				.mapCounselingSessionEntityToCounselingSession(counselingSessionEntitySaved);
	}

	@Override
	public CounselingSession update(CounselingSession counselingSession) {
		CounselingSessionEntity counselingSessionEntity = counselingSessionJpaRepository
				.findOne(counselingSession.getId());
		counselingSessionServiceMapper.mapCounselingSessionToCounselingSessionEntity(counselingSession,
				counselingSessionEntity);
		CounselingSessionEntity counselingSessionEntitySaved = counselingSessionJpaRepository
				.save(counselingSessionEntity);
		return counselingSessionServiceMapper
				.mapCounselingSessionEntityToCounselingSession(counselingSessionEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		counselingSessionJpaRepository.delete(id);
	}

	@Override
	public CounselingSessionEntity saveOrUpdate(CounselingSessionEntity counselingSessionEntity) {
		return counselingSessionJpaRepository.save(counselingSessionEntity);
	}

	public CounselingSessionJpaRepository getCounselingSessionJpaRepository() {
		return counselingSessionJpaRepository;
	}

	public void setCounselingSessionJpaRepository(CounselingSessionJpaRepository counselingSessionJpaRepository) {
		this.counselingSessionJpaRepository = counselingSessionJpaRepository;
	}

	public CounselingSessionServiceMapper getCounselingSessionServiceMapper() {
		return counselingSessionServiceMapper;
	}

	public void setCounselingSessionServiceMapper(CounselingSessionServiceMapper counselingSessionServiceMapper) {
		this.counselingSessionServiceMapper = counselingSessionServiceMapper;
	}

	@Override
	public Page<CounselingSessionEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return counselingSessionJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void update_isDelete(Integer id) {
		try {
			counselingSessionJpaRepository.update_isDelete(id);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public Integer countSatisfactionEvaluation(Integer userId, Integer counselorId) {
		try {
			return counselingSessionJpaRepository.countSatisfactionEvaluation(userId, counselorId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer countCounselingSession(Integer userId) {
		try {
			return counselingSessionJpaRepository.countCounselingSession(userId);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer countCounselingSessionHaveCounselYet(Integer userId, Date date) {

		try {
			return counselingSessionJpaRepository.countCounselingSessionHaveCounselYet(userId, date);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer countCounselingSessionOfCounselor(Integer counselorId, Short status) {
		try {
			return counselingSessionJpaRepository.countCounselingSessionOfCounselor(counselorId, status);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CounselingSessionEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.fromString(params.getOrDefault("direction", "DESC").toString()), params.getOrDefault("sorts", "createDate").toString())));

		Specification<CounselingSessionEntity> specification = new Specification<CounselingSessionEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselingSessionEntity> root, CriteriaQuery<?> criteriaQuery,
					CriteriaBuilder criteriaBuilder) {

				root
						.join("counselor", JoinType.INNER)
						.join("user", JoinType.INNER);

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(criteriaBuilder.equal(root.get("id"), id));
				}
				if (params.get("startTime") != null) {
					Date startTime = (Date) params.get("startTime");
					predicates.add(criteriaBuilder.equal(root.get("startTime"), startTime));
				}
				if (params.get("userId") != null) {
					Integer userId = Integer.parseInt(params.get("userId").toString());
					predicates.add(criteriaBuilder.equal(root.join("user").get("id"), userId));
				}
				if (params.get("counselorId") != null) {
					Integer counselorId = Integer.parseInt(params.get("counselorId").toString());
					predicates.add(criteriaBuilder.equal(root.join("counselor").get("id"), counselorId));
				}
				if (params.get("statuses") != null) {
					Short[] statuses = (Short[]) params.get("statuses");
					predicates.add(criteriaBuilder.isTrue(root.get("status").in(statuses)));
				}
				if (params.get("roomId") != null) {
					String roomId = String.valueOf(params.get("roomId"));
					predicates.add(criteriaBuilder.equal(root.get("roomId"), roomId));
				}
				if (params.get("rooms") != null) {
					predicates.add(criteriaBuilder.isNull(root.get("roomId")));
				}
				if (params.get("scheduledTime") != null) {
					Date scheduledTime = (Date) params.get("scheduledTime");
					predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("startTime"), scheduledTime));
				}
				if (params.get("counselTypes") != null) {
					Short[] counselTypes = (Short[]) params.get("counselTypes");
					predicates.add(criteriaBuilder.isTrue(root.get("counselType").in(counselTypes)));
				}
				if (params.get("paymentTypes") != null) {
					Short[] paymentTypes = (Short[]) params.get("paymentTypes");
					predicates.add(criteriaBuilder.isTrue(root.join("paymentHistory", JoinType.LEFT).get("typeCoin").in(paymentTypes)));
				}
				if (params.get("fullname") != null) {
					String fullname = String.valueOf(params.get("fullname"));
					if (fullname.trim().length() > 0) {
						predicates.add(criteriaBuilder.equal(root.join("user").get("fullname"), fullname));
					}
				}
				if (params.get("fromTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd");
					try {
						Date fromTime = format.parse(String.valueOf(params.get("fromTime")) + " 00:00:00");
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromTime));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("fromNow") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date fromNow = format.parse(String.valueOf(params.get("fromNow")));
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromNow));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("toTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date toTime = format.parse(String.valueOf(params.get("toTime")) + " 23:59:59");
						predicates.add(
								criteriaBuilder.lessThanOrEqualTo(root.get("endTime"), toTime)
						);
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("forMain") != null) {
					Calendar calendar = Calendar.getInstance();
					predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("endTime"), calendar.getTime()));
					calendar.add(Calendar.HOUR, 6);
					predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("startTime"), calendar.getTime()));
				}
				if (params.get("notFinished") != null) {
					predicates.add(
							criteriaBuilder.or(
									// cancel status
									criteriaBuilder.equal(root.get("status"), ApplicationDefine.CounselingSession_Status.RESERVATION_CANCEL.getCode()),
									// not finished yet
									criteriaBuilder.and(
											// not counsel status
											criteriaBuilder.equal(root.get("status"), ApplicationDefine.CounselingSessionStatus.NOT_COUNSELED.getCode()),
											// endtime ge now
											criteriaBuilder.greaterThanOrEqualTo(root.get("endTime"), new Date())
									)
							)
					);
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return counselingSessionJpaRepository.findAll(specification, pageable);
	}

	@Override
	public long count(Map<String, Object> params) {
		Specification<CounselingSessionEntity> specification = new Specification<CounselingSessionEntity>() {
			@Override
			public Predicate toPredicate(Root<CounselingSessionEntity> root, CriteriaQuery<?> criteriaQuery,
										 CriteriaBuilder criteriaBuilder) {

				root
						.join("counselor", JoinType.INNER)
						.join("user", JoinType.INNER);

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(criteriaBuilder.equal(root.get("id"), id));
				}
				if (params.get("startTime") != null) {
					Date startTime = (Date) params.get("startTime");
					predicates.add(criteriaBuilder.equal(root.get("startTime"), startTime));
				}
				if (params.get("userId") != null) {
					Integer userId = Integer.parseInt(params.get("userId").toString());
					predicates.add(criteriaBuilder.equal(root.join("user").get("id"), userId));
				}
				if (params.get("counselorId") != null) {
					Integer counselorId = Integer.parseInt(params.get("counselorId").toString());
					predicates.add(criteriaBuilder.equal(root.join("counselor").get("id"), counselorId));
				}
				if (params.get("statuses") != null) {
					Short[] statuses = (Short[]) params.get("statuses");
					predicates.add(criteriaBuilder.isTrue(root.get("status").in(statuses)));
				}
				if (params.get("roomId") != null) {
					String roomId = String.valueOf(params.get("roomId"));
					predicates.add(criteriaBuilder.equal(root.get("roomId"), roomId));
				}
				if (params.get("rooms") != null) {
					predicates.add(criteriaBuilder.isNull(root.get("roomId")));
				}
				if (params.get("scheduledTime") != null) {
					Date scheduledTime = (Date) params.get("scheduledTime");
					predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("startTime"), scheduledTime));
				}
				if (params.get("counselTypes") != null) {
					Short[] counselTypes = (Short[]) params.get("counselTypes");
					predicates.add(criteriaBuilder.isTrue(root.get("counselType").in(counselTypes)));
				}
				if (params.get("paymentTypes") != null) {
					Short[] paymentTypes = (Short[]) params.get("paymentTypes");
					predicates.add(criteriaBuilder.isTrue(root.join("paymentHistory", JoinType.LEFT).get("typeCoin").in(paymentTypes)));
				}
				if (params.get("fullname") != null) {
					String fullname = String.valueOf(params.get("fullname"));
					if (fullname.trim().length() > 0) {
						predicates.add(criteriaBuilder.equal(root.join("user").get("fullname"), fullname));
					}
				}
				if (params.get("fromTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd");
					try {
						Date fromTime = format.parse(String.valueOf(params.get("fromTime")) + " 00:00:00");
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromTime));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("fromNow") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date fromNow = format.parse(String.valueOf(params.get("fromNow")));
						predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("startTime"), fromNow));
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("toTime") != null) {
					DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					try {
						Date toTime = format.parse(String.valueOf(params.get("toTime")) + " 23:59:59");
						predicates.add(
								criteriaBuilder.lessThanOrEqualTo(root.get("endTime"), toTime)
						);
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				if (params.get("notFinished") != null) {
					predicates.add(
							criteriaBuilder.or(
									// not finished yet
									criteriaBuilder.and(
											// not counsel status
											criteriaBuilder.equal(root.get("status"), ApplicationDefine.CounselingSessionStatus.NOT_COUNSELED.getCode()),
											// endtime ge now
											criteriaBuilder.greaterThanOrEqualTo(root.get("endTime"), new Date())
									)
							)
					);
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return counselingSessionJpaRepository.count(specification);
	}

	@Override
	public PageCustom<ReservationEntity> filterReservation(Date startTime, Date endTime, Short[] userType,
			Integer businessId, Integer yearContract, Integer subBusineesId, String[] os, Short[] status,
			Short[] paymentType, String type, String key, String orderBy, Integer page, Integer size) {

		try {
			String str_where = "";
			Calendar cal = Calendar.getInstance(); 
			Calendar now = Calendar.getInstance(); 
			str_where += " and cs.start_time >= " +"'"+now.get(Calendar.YEAR)+"-"+(now.get(Calendar.MONTH)+1)+"-"+now.get(Calendar.DATE)+ "'";
			if (startTime != null) {
				cal.setTime(startTime);
				str_where += " and cs.create_date > " +"'"+cal.get(Calendar.YEAR)+"-"+(cal.get(Calendar.MONTH)+1)+"-"+cal.get(Calendar.DATE)+ "'";
			}

			if (endTime != null) {
				cal.setTime(endTime);
				str_where += " and cs.create_date <= "+ "'"+cal.get(Calendar.YEAR)+"-"+(cal.get(Calendar.MONTH)+1)+"-"+cal.get(Calendar.DATE)+" 23:59:59'";
			}

			if (userType.length == 1) {
				if (userType[0] == 0) {
					str_where += " and (u1.role_id = 1 or u1.role_id = 5)";
				} else if (userType[0] == 1) {
					str_where += " and (u1.role_id = 6 or u1.role_id = 7)";
				}
			}

			if (businessId > 0) {
				str_where += " and b.id = "+businessId;
				if (yearContract > 0) {
					str_where += " and sb.year_manager ="+yearContract;
				}
				if (subBusineesId > 0) {
					str_where += " and sb.id = "+subBusineesId;
				}
			}

			if (status.length == 1) {
				str_where += " and cs.status = " + status[0];
			}else{
				str_where += " and (cs.status = 0 or cs.status = 1 )" ;
			}

			if (os.equals("")) {
				str_where += " and u1.os_name = " + os[0];
			}

			if (status.length == 1) {
				str_where += " and cs.status = " + status[0];
			}

			if (paymentType.length == 1) {
					str_where += " and ph.type_coin = "+paymentType[0];
			}

			if (type != null & key != null) {
				if (type.equals("reservationName")) {
					str_where += " and u1.fullname like '%" + key + "%'";
				} else if (type.equals("counselorName")) {
					str_where += " and u2.fullname like '%" + key + "%'";
				}
			}
			String order = " order by ";
			 if(orderBy.equals("reservationName")){
				 order += "u1.fullname ASC";
			 }else if(orderBy.equals("counselorName")){
				 order += "u2.fullname ASC";
			 }else{
				 order += "cs.start_time DESC";
			 }
			String select_atribute = " select cs.id, u1.fullname as username,u1.role_id, b.business_name as businessName, sb.year_manager, sb.business_name as subBusinessname, u2.fullname as counselorName, cs.create_date, cs.start_time, cs.status, ph.type_coin ";
			String select_count = "select count(*) ";
			String str_clause = "from (((((counseling_session cs inner join user u1 on u1.id = cs.user_id) "
					+ "inner join counselor c on c.id = cs.counselor_id  ) inner join user u2 on c.id = u2.id) "
					+ "left join payment_history ph on cs.payment_id = ph.id) "
					+ "left join business sb on sb.id = u1.id) left join business b on b.id = sb.parent_business_id "
					+ "where ph.type_payment =2 and cs.is_delete = 0 " + str_where + order ;

			Query q = em.createNativeQuery(select_atribute + str_clause +" limit " + (page-1) + ", " + size);
			System.out.println(select_atribute + str_clause +" limit " + (page-1) + ", " + size);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			List<ReservationEntity> list = new ArrayList<>();
			for (Object[] i : reservation) {
				ReservationEntity r = new ReservationEntity();
				r.setId((Integer) i[0]);
				r.setReservationName((String) i[1]);
				r.setReservationRole((Integer) i[2]);
				r.setBussiness((String) i[3]);
				r.setYearContract((Integer) i[4]);
				r.setSubBussiness((String) i[5]);
				r.setCounselorName((String) i[6]);
				r.setCreateDate((Date) i[7]);
				r.setStartTime((Date) i[8]);
				r.setStatus((Short) i[9]);
				r.setTypeCoin((Short) i[10]);
				list.add(r);
			}
			Query c = em.createNativeQuery(select_count + str_clause);
			Object o = c.getSingleResult();
			Integer totalCount = Integer.valueOf(c.getSingleResult().toString());
			System.out.println("totalCount: "+totalCount);
			PageCustom<ReservationEntity> pageCustom = new PageCustom<>(list, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public PageCustom<ReservationEntity> filterCounseling(Date startTime, Date endTime, Short[] userType,
			Integer businessId, Integer yearContract, Integer subBusineesId, Short[] status, Short[] paymentId,
			String type, String key, String orderBy, Integer page, Integer size) {
		try {
			String str_where = "";
			if (startTime != null) {
				str_where += " and cs.start_time > DATE(" + startTime+")";
			}

			if (endTime != null) {
				str_where += " and cs.start_time < DATE(" + endTime+")";
			}

			if (userType.length == 1) {
				if (userType[0] == 0) {
					str_where += " and u1.role_id = 1 ";
				} else if (userType[0] == 1) {
					str_where += " and u1.role_id = 5 ";
					if (businessId > 0) {
						str_where += " and b.id = "+businessId;
						if (yearContract > 0) {
							str_where += " and sb.manage_year ="+yearContract;
						}
						if (subBusineesId > 0) {
							str_where += " and sb.id = "+subBusineesId;
						}
					}
				}
			}

			
			
			if(status.length > 0){
				List<Short> list_status = new ArrayList<>();
				for (Short i : status) {
					if(i == 4){
						str_where += " and TIMESTAMPDIFF(MINUTE,cs.start_time,cs.entry_user_time) >= 15 " ;
					}else{
						list_status.add(i);
					}
				}
				if(list_status.size() > 0){
					status = list_status.toArray(new Short[list_status.size()]);
					String str_status = Arrays.toString(status);
					str_status = str_status.replace("[", "(");
					str_status = str_status.replace("]", ")");
					str_where += " and cs.status in " + str_status ;
				}
				
			}else{
				str_where += " and cs.status in (2,3)" ;
			}



			if (paymentId.length == 1) {
				str_where += " and ph.type_coin = "+paymentId[0];
			}

			if (type != null & key != null) {
				if (type.equals("reservationName")) {
					str_where += " and u1.fullname like '%" + key + "%'";
				} else if (type.equals("counselorName")) {
					str_where += " and u2.fullname like '%" + key + "%'";
				}
			}
			String order = " order by ";
			 if(orderBy.equals("memberName")){
				 order += "u1.fullname ASC";
			 }else if(orderBy.equals("counselorName")){
				 order += "u2.fullname ASC";
			 }else{
				 order += "cs.start_time DESC";
			 }
			String select_atribute = " select cs.id, u1.fullname as username,u1.role_id, b.business_name as businessName, sb.manage_year, sb.business_sub_name as subBusinessname, u2.fullname as counselorName, cs.start_time, cs.end_time, cs.status, ph.type_coin,"
					+ " cs.entry_counselor_time, cs.entry_user_time, cs.exit_counselor_time, cs.exit_user_time ";
			String select_count = "select count(*) ";
			String str_clause = "from (((((counseling_session cs inner join user u1 on u1.id = cs.user_id) "
					+ "inner join counselor c on c.id = cs.counselor_id  ) inner join user u2 on c.id = u2.id) "
					+ "left join payment_history ph on cs.payment_id = ph.id) "
					+ "left join business_sub sb on sb.id = u1.business_sub_id) left join business b on b.id = sb.business_id "
					+ "where ph.type_payment =2  and  cs.is_delete = 0 " + str_where + order ;

			Query q = em.createNativeQuery(select_atribute + str_clause +" limit " + size  + " OFFSET " + (page-1)*size);
			@SuppressWarnings("unchecked")
			List<Object[]> reservation = q.getResultList();
			List<ReservationEntity> list = new ArrayList<>();
			for (Object[] i : reservation) {
				ReservationEntity r = new ReservationEntity();
				r.setId((Integer) i[0]);
				r.setReservationName((String) i[1]);
				r.setReservationRole((Integer) i[2]);
				r.setBussiness((String) i[3]);
				r.setYearContract((Integer) i[4]);
				r.setSubBussiness((String) i[5]);
				r.setCounselorName((String) i[6]);
				r.setStartTime((Date) i[7]);
				r.setEndTime((Date) i[8]);
				r.setStatus((Short) i[9]);
				r.setTypeCoin((Short) i[10]);
				r.setEntryCounselorTime((Date) i[11]);
				r.setEntryUserTime((Date) i[12]);
				r.setExitCounselorTime((Date) i[13]);
				r.setExitUserTime((Date) i[14]);
				list.add(r);
			}
			Query c = em.createNativeQuery(select_count + str_clause);
			Object o = c.getSingleResult();
			Integer totalCount = Integer.valueOf(c.getSingleResult().toString());
			System.out.println("totalCount: "+totalCount);
			PageCustom<ReservationEntity> pageCustom = new PageCustom<>(list, totalCount, page, size);
			return pageCustom;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<CounselingSession> findEarliestCounselingTime(Integer userId) {
		List<CounselingSessionEntity> entities = counselingSessionJpaRepository.findEarliestCounselingTime(userId);
		List<CounselingSession> beans = new ArrayList<>();
		for (CounselingSessionEntity counselingSessionEntity : entities) {
			beans.add(counselingSessionServiceMapper.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity));
		}
		return beans;
	}
	
	@Override
	public List<MyReservation> counselingSessionEntitiesByUserId(Integer userId) {
		try {
			List<MyReservation> list = new ArrayList<>();
			String str_clause = "select * from ("
					+ " (select  co.thumbnail_url, u.fullname, c.start_time , c.end_time, c.status , c.id , co.points, co.likes , c.payment_id , co.id AS a, uq.counseling_session_id "
					+ " from counseling_session c JOIN counselor co on c.counselor_id = co.id JOIN user u on co.id = u.id LEFT JOIN user_questionaire uq on c.id = uq.counseling_session_id  "
					+ " WHERE c.status = 1 and c.is_delete = 0 and c.user_id = "+userId+" and c.end_time >= NOW() ) "
					+ " union all ( select  co1.thumbnail_url, u1.fullname, c1.start_time , c1.end_time, c1.status , c1.id , co1.points, co1.likes , c1.payment_id, co1.id AS a , uq1.counseling_session_id "
					+ " from counseling_session c1 "
					+ " JOIN counselor co1 on c1.counselor_id = co1.id "
					+ " JOIN user u1 on co1.id = u1.id "
					+ " LEFT JOIN user_questionaire uq1 on c1.id = uq1.counseling_session_id "
					+ " WHERE c1.status = 0 and c1.is_delete = 0 and c1.user_id = "+userId+" and DATEDIFF(NOW(),c1.cancel_metting_time) <= 7 )) x ORDER BY  x.status DESC, x.end_time DESC ";
			
			
			Query q = em.createNativeQuery(str_clause);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] i : results) {
				MyReservation m = new MyReservation();
				m.setThumbnailUrlCounselor((String) i[0]);
				m.setFullNameCounselor((String) i[1]);
				m.setStartTimeCounseling((Date) i[2]);
				m.setEndTimeCounseling((Date) i[3]);
				if(((Short) i[4]) == 0) {
					m.setIsCancelCounseling(1);
				} else {
					m.setIsCancelCounseling(0);
				}
				m.setId((Integer) i[5]);
				m.setPointsCounselor((Float) i[6]);
				m.setPointsConvertCounselor(m.getPointsCounselor());
				m.setLikesCounselor((Integer) i[7]);
				m.setPaymentId((Integer) i[8]);
				m.setCounselorId((Integer) i[9]);
				if((Integer) i[10] != null) {
					m.setStatusEvaluationOfSatisfaction(1);
				} else {
					m.setStatusEvaluationOfSatisfaction(0);
				}
				list.add(m);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public MyReservation myReservationByCounselingSessionId(Integer counselingSessionId, Integer userId) {
		try {
			String str_clause = "select co.thumbnail_url, u.fullname, c.start_time , c.end_time, c.status , c.id , co.points, co.likes , c.payment_id, co.id AS a , uq.counseling_session_id "
					+ "from counseling_session c "
					+ "JOIN counselor co on c.counselor_id = co.id "
					+ "JOIN user u on co.id = u.id "
					+ "LEFT JOIN user_questionaire uq on c.id = uq.counseling_session_id "
					+ "WHERE c.user_id ="+userId+" and c.is_delete = 0 and c.id ="+counselingSessionId+" ";
			
			MyReservation myReservation = new MyReservation();
			Query q = em.createNativeQuery(str_clause);
			Object[] results = (Object[]) q.getSingleResult();
			myReservation.setThumbnailUrlCounselor((String) results[0]);
			myReservation.setFullNameCounselor((String) results[1]);
			myReservation.setStartTimeCounseling((Date) results[2]);
			myReservation.setEndTimeCounseling((Date) results[3]);
			if(((Short) results[4]) == 0) {
				myReservation.setIsCancelCounseling(1);
			} else {
				myReservation.setIsCancelCounseling(0);
			}
			myReservation.setId((Integer) results[5]);
			myReservation.setPointsCounselor((Float) results[6]);
			myReservation.setPointsConvertCounselor(myReservation.getPointsCounselor() * 2);
			myReservation.setLikesCounselor((Integer) results[7]);
			myReservation.setPaymentId((Integer) results[8]);
			myReservation.setCounselorId((Integer) results[9]);
			if((Integer) results[10] != null) {
				myReservation.setStatusEvaluationOfSatisfaction(1);
			} else {
				myReservation.setStatusEvaluationOfSatisfaction(0);
			}
			
			return myReservation;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<MyReservation> counselingSessionHistoryByUserId(Integer page, Integer size, Integer userId) {
		try {
			if (page > 0) {
				page = page - 1;
			}
			List<MyReservation> list = new ArrayList<>();
			String str_clause = "select co1.thumbnail_url, u1.fullname, c1.start_time , c1.end_time, c1.status , c1.id , uq.point, co1.likes , c1.payment_id, co1.id as a1, uq.counseling_session_id "
					+ "from counseling_session c1 "
					+ "JOIN counselor co1 on c1.counselor_id = co1.id "
					+ "JOIN user u1 on co1.id = u1.id "
					+ "LEFT JOIN user_questionaire uq on c1.id = uq.counseling_session_id "
					+ "WHERE c1.status IN (2,3,4) and c1.is_delete = 0 and c1.user_id ="+userId+" order by c1.end_time DESC limit "+ (page*size)+","+ size ;
			
			Query q = em.createNativeQuery(str_clause);
			@SuppressWarnings("unchecked")
			List<Object[]> results = q.getResultList();
			for (Object[] i : results) {
				MyReservation m = new MyReservation();
				m.setThumbnailUrlCounselor((String) i[0]);
				m.setFullNameCounselor((String) i[1]);
				m.setStartTimeCounseling((Date) i[2]);
				m.setEndTimeCounseling((Date) i[3]);
				if(((Short) i[4]) == 0) {
					m.setIsCancelCounseling(1);
				} else {
					m.setIsCancelCounseling(0);
				}
				m.setId((Integer) i[5]);
				if ((Float) i[6] == null) {
					m.setPointsCounselor(0f);
				} else {
					m.setPointsCounselor((Float) i[6]);
				}
				
				m.setPointsConvertCounselor(m.getPointsCounselor() * 2);
				m.setLikesCounselor((Integer) i[7]);
				m.setPaymentId((Integer) i[8]);
				m.setCounselorId((Integer) i[9]);
				if((Integer) i[10] != null) {
					m.setStatusEvaluationOfSatisfaction(1);
				} else {
					m.setStatusEvaluationOfSatisfaction(0);
				}
				list.add(m);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer totalCompletedCounselingHistoryByUser(Integer userId) {
		Integer total = counselingSessionJpaRepository.totalCompletedCounselingHistoryByUser(userId);
		if(total == null) {
			total = 0;
		}
		return total;
	}
	
	@Override
	public Integer[] getYearCompletedCounseling(Integer userId) {
		return counselingSessionJpaRepository.getYearCompletedCounseling(userId);
	}

	@Override
	public List<Integer> listStartTimeCounselingSSByDay(Date dayConvert, Integer counselorId) {
		List<Integer> entities = counselingSessionJpaRepository.listStartTimeCounselingSSByDay(dayConvert, counselorId);
		return entities;
	}

	@Override
	public List<UserCounselingSession> listCounselingSSInAWeek(Integer counselorId) {
		try {
			List<Object[]> rs = counselingSessionJpaRepository.listCounselingSSInAWeek(counselorId);
			List<UserCounselingSession> list = new ArrayList<>();
			for (Object[] obj : rs) {
				UserCounselingSession u = new UserCounselingSession();
				u.setFullName((String) obj[0]);
				u.setEmail((String) obj[1]);
				u.setUserId((Integer) obj[2]);
				list.add(u);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public List<UserCounselingSession> listCounselingSessionByCounselorId(Integer counselorId) {
		try {
			List<Object[]> rs = counselingSessionJpaRepository.listCounselingSessionByCounselorId(counselorId);
			List<UserCounselingSession> list = new ArrayList<>();
			for (Object[] obj : rs) {
				UserCounselingSession u = new UserCounselingSession();
				u.setFullName((String) obj[0]);
				u.setEmail((String) obj[1]);
				u.setUserId((Integer) obj[2]);
				list.add(u);
			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public CounselingSession findByIdAnhUserId(Integer userId, Integer revertionId) {
		try {
			CounselingSessionEntity counselingSessionEntity = counselingSessionJpaRepository.findByIdAnhUserId(userId, revertionId);
			return counselingSessionServiceMapper.mapCounselingSessionEntityToCounselingSession(counselingSessionEntity);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
	}
	@Override
	public int countBy(Date start, Date end, Integer counselorId) {
		try {
			return counselingSessionJpaRepository.countBy(start, end, counselorId);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public List<CounselingSessionEntity> listNotificaionByMinutes(Integer year, Integer month, Integer day,
			Integer hour, Integer minute) {
		try {
			return counselingSessionJpaRepository.listNotificaionByMinutes(year, month, day, hour, minute);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<CounselingSessionEntity> listNotificaionByHour(Integer year, Integer month, Integer day, Integer hour, Integer minute) {
		try {
			return counselingSessionJpaRepository.listNotificaionByHour(year, month, day, hour, minute);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Object[]> listRequiredSatisfaction(Integer year, Integer month, Integer day,
			Integer hour, Integer minute) {
		try {
			return counselingSessionJpaRepository.listRequiredSatisfaction(year, month, day, hour, minute);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Long> listTimeByDate(Integer couselorId, Date date) {
		List<BigInteger> rs = counselingSessionJpaRepository.listTimeByDate(couselorId, date);
		List<Long> list = new ArrayList<>();
		for (int i = 0; i < rs.size(); i++) {
			list.add(rs.get(i).longValue());
		}
		return list;
	}

	@Override
	public Integer countTotalCouseling(Date startTime, Date endTime, Integer couselorId) {
		Integer totalCo = counselingSessionJpaRepository.countTotalCouseling(startTime, endTime, couselorId);
		if (totalCo == null) {
			totalCo = 0;
		}
		return totalCo;
	}

	@Override
	public void updateCounselingFinished() {
		try {
			counselingSessionJpaRepository.updateCounselingFinished();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void updateCounselingNotFinished() {
		try {
			counselingSessionJpaRepository.updateCounselingNotFinished();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public CounselingSessionEntity findOneByRoomId(String roomId) {
		return counselingSessionJpaRepository.findByRoomId(roomId);
	}

	@Override
	public Float totalPointByCounselor(Integer counselorId) {
		Float total = counselingSessionJpaRepository.totalPointByCounselor(counselorId);
		if (total == null) {
			total = 0f;
		}
		return total;
	}

	@Override
	public Integer totalCounselingSessionByUserAndCounselor(Integer userId) {
		return counselingSessionJpaRepository.totalCounselingSessionByUserAndCounselor(userId);
	}
	
	@Override
	public CounselingSessionEntity findOneByPreRoomId(String roomId) {
		return counselingSessionJpaRepository.findByPreRoomId(roomId);
	}
}
