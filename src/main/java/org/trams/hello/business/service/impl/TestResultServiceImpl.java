/*
 * Created on 22 thg 2 2017 ( Time 10:38:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.TestResult;
import org.trams.hello.bean.jpa.TestResultEntity;
import org.trams.hello.business.service.TestResultService;
import org.trams.hello.business.service.mapping.TestResultServiceMapper;
import org.trams.hello.data.repository.jpa.TestResultJpaRepository;
/**
 * Implementation of TestResultService
 */
@Component
@Transactional
public class TestResultServiceImpl implements TestResultService {

	@Resource
	private TestResultJpaRepository testResultJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private TestResultServiceMapper testResultServiceMapper;
	
	@Override
	public TestResult findById(Integer id) {
		TestResultEntity testResultEntity = testResultJpaRepository.findOne(id);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntity);
	}

	@Override
	public Page<TestResultEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return testResultJpaRepository.findAll(request);
	}

	@Override
	public List<TestResult> findAll() {
		Iterable<TestResultEntity> entities = testResultJpaRepository.findAll();
		List<TestResult> beans = new ArrayList<TestResult>();
		for(TestResultEntity testResultEntity : entities) {
			beans.add(testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = testResultJpaRepository.count();
		return count;
	}

	@Override
	public TestResult save(TestResult testResult) {
		return update(testResult) ;
	}

	@Override
	public TestResult create(TestResult testResult) {
/*
		TestResultEntity testResultEntity = testResultJpaRepository.findOne(testResult.getId());
		if( testResultEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		testResultEntity = new TestResultEntity();
		testResultServiceMapper.mapTestResultToTestResultEntity(testResult, testResultEntity);
		TestResultEntity testResultEntitySaved = testResultJpaRepository.save(testResultEntity);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntitySaved);
*/
		TestResultEntity testResultEntity = new TestResultEntity();
		testResultServiceMapper.mapTestResultToTestResultEntity(testResult, testResultEntity);
		TestResultEntity testResultEntitySaved = testResultJpaRepository.save(testResultEntity);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntitySaved);
	}

	@Override
	public TestResult update(TestResult testResult) {
		TestResultEntity testResultEntity = testResultJpaRepository.findOne(testResult.getId());
		testResultServiceMapper.mapTestResultToTestResultEntity(testResult, testResultEntity);
		TestResultEntity testResultEntitySaved = testResultJpaRepository.save(testResultEntity);
		return testResultServiceMapper.mapTestResultEntityToTestResult(testResultEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		testResultJpaRepository.delete(id);
	}

	public TestResultJpaRepository getTestResultJpaRepository() {
		return testResultJpaRepository;
	}

	public void setTestResultJpaRepository(TestResultJpaRepository testResultJpaRepository) {
		this.testResultJpaRepository = testResultJpaRepository;
	}

	public TestResultServiceMapper getTestResultServiceMapper() {
		return testResultServiceMapper;
	}

	public void setTestResultServiceMapper(TestResultServiceMapper testResultServiceMapper) {
		this.testResultServiceMapper = testResultServiceMapper;
	}

	@Override
	public Page<TestResultEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return testResultJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Page<TestResultEntity> filter(Map<String, Object> params) {
		int page = Integer.parseInt(params.get("page").toString());
		int size = Integer.parseInt(params.get("size").toString());

		PageRequest pageable = new PageRequest(page - 1, size, new Sort(new Order(Direction.fromString(String.valueOf(params.getOrDefault("direction", "DESC"))), "createDate")));

		Specification<TestResultEntity> specification = new Specification<TestResultEntity>() {
			@Override
			public Predicate toPredicate(Root<TestResultEntity> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

				List<Predicate> predicates = new ArrayList<>();

				if (params.get("id") != null) {
					Integer id = Integer.parseInt(params.get("id").toString());
					predicates.add(
							criteriaBuilder.equal(root.get("id"), id)
					);
				}
				if (params.get("questionId") != null) {
					Integer questionId = Integer.parseInt(params.get("questionId").toString());
					predicates.add(
							criteriaBuilder.equal(root.join("userQuestionaire").get("id"), questionId)
					);
				}

				if (predicates.isEmpty()) {
					return criteriaBuilder.isNotNull(root.get("id"));
				} else {
					return criteriaBuilder.and(predicates.toArray(new Predicate[] {}));
				}
			}
		};

		return testResultJpaRepository.findAll(specification, pageable);
	}

	@Override
	public List<TestResultEntity> listResultBy_UserQuestionId(Integer userQuestionaireId) {
		try {
			return testResultJpaRepository.listResultBy_UserQuestionId(userQuestionaireId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public void deleteBy_UserQuestionId(Integer userQuestionaireId) {
		try {
			testResultJpaRepository.deleteBy_UserQuestionId(userQuestionaireId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public List<TestResultEntity> findBy_UserAndType(Integer userId, Integer type, String orderBy) {
		try {
			PageRequest pageable = new PageRequest(0, 1, new Sort(new Order(Direction.DESC, "createDate")));
			return testResultJpaRepository.findBy_UserAndType(userId, type, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<TestResultEntity> findBy_UserQuestionaireId(Integer user) {
		try {
			PageRequest pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(new Order(Direction.ASC, "question.orderNumber")));
			return testResultJpaRepository.findBy_UserQuestionaireId(user, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


}
