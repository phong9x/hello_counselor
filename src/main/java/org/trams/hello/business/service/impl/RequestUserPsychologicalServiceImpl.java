/*
 * Created on 12 Apr 2017 ( Time 16:01:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.RequestUserPsychological;
import org.trams.hello.bean.api.PsychologicalTest;
import org.trams.hello.bean.api.RequestUserPsychologicalApi;
import org.trams.hello.bean.jpa.RequestUserPsychologicalEntity;
import org.trams.hello.business.service.RequestUserPsychologicalService;
import org.trams.hello.business.service.mapping.RequestUserPsychologicalServiceMapper;
import org.trams.hello.data.repository.jpa.RequestUserPsychologicalJpaRepository;
/**
 * Implementation of RequestUserPsychologicalService
 */
@Component
@Transactional
public class RequestUserPsychologicalServiceImpl implements RequestUserPsychologicalService {

	@Resource
	private RequestUserPsychologicalJpaRepository requestUserPsychologicalJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private RequestUserPsychologicalServiceMapper requestUserPsychologicalServiceMapper;
	
	@Override
	public RequestUserPsychological findById(Integer id) {
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = requestUserPsychologicalJpaRepository.findOne(id);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntity);
	}

	@Override
	public Page<RequestUserPsychologicalEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return requestUserPsychologicalJpaRepository.findAll(request);
	}

	@Override
	public List<RequestUserPsychological> findAll() {
		Iterable<RequestUserPsychologicalEntity> entities = requestUserPsychologicalJpaRepository.findAll();
		List<RequestUserPsychological> beans = new ArrayList<RequestUserPsychological>();
		for(RequestUserPsychologicalEntity requestUserPsychologicalEntity : entities) {
			beans.add(requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = requestUserPsychologicalJpaRepository.count();
		return count;
	}

	@Override
	public RequestUserPsychological save(RequestUserPsychological requestUserPsychological) {
		return update(requestUserPsychological) ;
	}

	@Override
	public RequestUserPsychological create(RequestUserPsychological requestUserPsychological) {
/*
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = requestUserPsychologicalJpaRepository.findOne(requestUserPsychological.getId());
		if( requestUserPsychologicalEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		requestUserPsychologicalEntity = new RequestUserPsychologicalEntity();
		requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalToRequestUserPsychologicalEntity(requestUserPsychological, requestUserPsychologicalEntity);
		RequestUserPsychologicalEntity requestUserPsychologicalEntitySaved = requestUserPsychologicalJpaRepository.save(requestUserPsychologicalEntity);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntitySaved);
*/
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = new RequestUserPsychologicalEntity();
		requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalToRequestUserPsychologicalEntity(requestUserPsychological, requestUserPsychologicalEntity);
		RequestUserPsychologicalEntity requestUserPsychologicalEntitySaved = requestUserPsychologicalJpaRepository.save(requestUserPsychologicalEntity);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntitySaved);
	}

	@Override
	public RequestUserPsychological update(RequestUserPsychological requestUserPsychological) {
		RequestUserPsychologicalEntity requestUserPsychologicalEntity = requestUserPsychologicalJpaRepository.findOne(requestUserPsychological.getId());
		requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalToRequestUserPsychologicalEntity(requestUserPsychological, requestUserPsychologicalEntity);
		RequestUserPsychologicalEntity requestUserPsychologicalEntitySaved = requestUserPsychologicalJpaRepository.save(requestUserPsychologicalEntity);
		return requestUserPsychologicalServiceMapper.mapRequestUserPsychologicalEntityToRequestUserPsychological(requestUserPsychologicalEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		requestUserPsychologicalJpaRepository.delete(id);
	}

	public RequestUserPsychologicalJpaRepository getRequestUserPsychologicalJpaRepository() {
		return requestUserPsychologicalJpaRepository;
	}

	public void setRequestUserPsychologicalJpaRepository(RequestUserPsychologicalJpaRepository requestUserPsychologicalJpaRepository) {
		this.requestUserPsychologicalJpaRepository = requestUserPsychologicalJpaRepository;
	}

	public RequestUserPsychologicalServiceMapper getRequestUserPsychologicalServiceMapper() {
		return requestUserPsychologicalServiceMapper;
	}

	public void setRequestUserPsychologicalServiceMapper(RequestUserPsychologicalServiceMapper requestUserPsychologicalServiceMapper) {
		this.requestUserPsychologicalServiceMapper = requestUserPsychologicalServiceMapper;
	}

	@Override
	public Page<RequestUserPsychologicalEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return requestUserPsychologicalJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	

	@Override
	public Page<RequestUserPsychologicalApi> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return requestUserPsychologicalJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public RequestUserPsychologicalEntity findOne(Integer id) {
		return requestUserPsychologicalJpaRepository.findOne(id);
	}

	@Override
	public List<PsychologicalTest> listRequestUserPsyByUserId(Integer userId) {
		try {
			List<Object[]> rs = requestUserPsychologicalJpaRepository.listRequestUserPsyByUserId(userId);
			List<PsychologicalTest> list = new ArrayList<>();
			for (Object[] objects : rs) {
				PsychologicalTest p = new PsychologicalTest();
				p.setNameCouselor((String) objects[0]);
				p.setCouselorId((Integer) objects[1]);
				p.setRequestPsychological((Date) objects[2]);
				p.setId((Integer) objects[3]);
				p.setEffectPaymentPsychological((Date) objects[4]);
				String testName = (String) objects[5];
				testName = testName.replace(",", ", ");
				p.setTestName(testName);
				p.setFee((Integer) objects[6]);
				p.setTotalTest(((BigInteger) objects[7]).intValue());
				
				list.add(p);
			}
			
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public RequestUserPsychologicalEntity findByIdEntity(Integer id) {
		return requestUserPsychologicalJpaRepository.findByIdEntity(id);
	}

}
