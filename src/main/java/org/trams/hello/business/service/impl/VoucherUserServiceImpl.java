/*
 * Created on 23 thg 11 2016 ( Time 16:49:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.hello.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.hello.bean.VoucherUser;
import org.trams.hello.bean.api.HelloVoucherSummary;
import org.trams.hello.bean.jpa.VoucherUserEntity;
import org.trams.hello.business.service.VoucherService;
import org.trams.hello.business.service.VoucherUserService;
import org.trams.hello.business.service.mapping.VoucherUserServiceMapper;
import org.trams.hello.data.repository.jpa.VoucherUserJpaRepository;
/**
 * Implementation of VoucherUserService
 */
@Component
@Transactional
public class VoucherUserServiceImpl implements VoucherUserService {

	@Resource
	private VoucherUserJpaRepository voucherUserJpaRepository;
	
	@Resource
	private VoucherService voucherService;

	private static final Integer PAGE_SIZE   = 15;

	@Autowired
	private EntityManager em;
	
	@Resource
	private VoucherUserServiceMapper voucherUserServiceMapper;
	
	@Override
	public VoucherUser findById(Integer id) {
		VoucherUserEntity voucherUserEntity = voucherUserJpaRepository.findOne(id);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntity);
	}

	@Override
	public Page<VoucherUserEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return voucherUserJpaRepository.findAll(request);
	}

	@Override
	public List<VoucherUser> findAll() {
		Iterable<VoucherUserEntity> entities = voucherUserJpaRepository.findAll();
		List<VoucherUser> beans = new ArrayList<VoucherUser>();
		for(VoucherUserEntity voucherUserEntity : entities) {
			beans.add(voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = voucherUserJpaRepository.count();
		return count;
	}

	@Override
	public VoucherUser save(VoucherUser voucherUser) {
		return update(voucherUser) ;
	}

	@Override
	public VoucherUser create(VoucherUser voucherUser) {
/*
		VoucherUserEntity voucherUserEntity = voucherUserJpaRepository.findOne(voucherUser.getId());
		if( voucherUserEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		voucherUserEntity = new VoucherUserEntity();
		voucherUserServiceMapper.mapVoucherUserToVoucherUserEntity(voucherUser, voucherUserEntity);
		VoucherUserEntity voucherUserEntitySaved = voucherUserJpaRepository.save(voucherUserEntity);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntitySaved);
*/
		VoucherUserEntity voucherUserEntity = new VoucherUserEntity();
		voucherUserServiceMapper.mapVoucherUserToVoucherUserEntity(voucherUser, voucherUserEntity);
		VoucherUserEntity voucherUserEntitySaved = voucherUserJpaRepository.save(voucherUserEntity);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntitySaved);
	}

	@Override
	public VoucherUser update(VoucherUser voucherUser) {
		VoucherUserEntity voucherUserEntity = voucherUserJpaRepository.findOne(voucherUser.getId());
		voucherUserServiceMapper.mapVoucherUserToVoucherUserEntity(voucherUser, voucherUserEntity);
		VoucherUserEntity voucherUserEntitySaved = voucherUserJpaRepository.save(voucherUserEntity);
		return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(voucherUserEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		voucherUserJpaRepository.delete(id);
	}

	public VoucherUserJpaRepository getVoucherUserJpaRepository() {
		return voucherUserJpaRepository;
	}

	public void setVoucherUserJpaRepository(VoucherUserJpaRepository voucherUserJpaRepository) {
		this.voucherUserJpaRepository = voucherUserJpaRepository;
	}

	public VoucherUserServiceMapper getVoucherUserServiceMapper() {
		return voucherUserServiceMapper;
	}

	public void setVoucherUserServiceMapper(VoucherUserServiceMapper voucherUserServiceMapper) {
		this.voucherUserServiceMapper = voucherUserServiceMapper;
	}

	@Override
	public Page<VoucherUserEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return voucherUserJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<VoucherUserEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return voucherUserJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalVourcherByUserId(Integer userId) {
		try {
			return voucherUserJpaRepository.totalVourcherByUserId(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<VoucherUserEntity> listPagingByUserIdAndStatus(Integer userId, short status) {
		try {
			return voucherUserJpaRepository.listPagingByUserIdAndStatus(userId,status);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	@Override
	public void deleteVouchert(Integer[] voucherId) {
		try {
			voucherUserJpaRepository.deleteVouchert(voucherId);
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}
	
	@Override
	public List<HelloVoucherSummary> voucherUserEntitiesByUserId(Integer page, Integer size, Integer userId) {
		List<HelloVoucherSummary> list = new ArrayList<>();
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.ASC, "statusUse"), new Order(Direction.DESC, "createDate")));
			Page<VoucherUserEntity> result = voucherUserJpaRepository.listPagingByUserId(userId, pageable);
			for (VoucherUserEntity i : result) {
				HelloVoucherSummary v = new HelloVoucherSummary();
				v.setId(i.getId());
				v.setUserId(i.getUserId());
				v.setVoucherId(i.getVoucher().getId());
				v.setFromDate(i.getFromDate());
				v.setToDate(i.getToDate());
				v.setStatusUse(i.getStatusUse());
				v.setCreateDate(i.getCreateDate());
				v.setUpdateDate(i.getUpdateDate());
				v.setUserVoucherDate(i.getUseVoucherDate());
				if(i.getVoucher().getContent() == null){
					v.setContentVoucher("");
				}else{
					v.setContentVoucher(i.getVoucher().getContent());
				}
				if(i.getVoucher().getBusinessSub() != null){
					v.setIsBussinessVoucher(1);
					v.setIsHeartVoucher(0);
				}else if(i.getVoucher().getTypeVoucher() == 2){
					v.setIsBussinessVoucher(0);
					v.setIsHeartVoucher(1);
				}
				v.setVoucherName(i.getVoucher().getName());
				list.add(v);
			}
			
			return list;
		} catch (Exception e) {
				e.printStackTrace();			
					return null;
		}
	}
	
	@Override
	public List<HelloVoucherSummary> voucherUserEntitiesByUserIdLoadMore(Integer userId, Integer startElement, Integer defaultElement) {
		List<HelloVoucherSummary> list = new ArrayList<>();
		try {
			List<VoucherUserEntity> result = voucherUserJpaRepository.voucherUserEntitiesByUserIdLoadMore(userId, 0 , startElement + defaultElement );
			for (VoucherUserEntity i : result) {
				HelloVoucherSummary v = new HelloVoucherSummary();
				v.setId(i.getId());
				v.setUserId(i.getUserId());
				v.setVoucherId(i.getVoucher().getId());
				v.setFromDate(i.getFromDate());
				v.setToDate(i.getToDate());
				v.setStatusUse(i.getStatusUse());
				v.setCreateDate(i.getCreateDate());
				v.setUpdateDate(i.getUpdateDate());
				v.setUserVoucherDate(i.getUseVoucherDate());
				if(i.getVoucher().getContent() == null){
					v.setContentVoucher("");
				}else{
					v.setContentVoucher(i.getVoucher().getContent());
				}
				if(i.getVoucher().getBusinessSub() != null){
					v.setIsBussinessVoucher(1);
					v.setIsHeartVoucher(0);
				}else if(i.getVoucher().getTypeVoucher() == 2){
					v.setIsBussinessVoucher(0);
					v.setIsHeartVoucher(1);
				}
				v.setVoucherName(i.getVoucher().getName());
				list.add(v);
			}
			
			return list;
		} catch (Exception e) {
				e.printStackTrace();			
					return null;
		}
	}

	@Override
	public Integer totalVoucherByUserId(Integer userId) {
		Integer totalVoucherByUserId = voucherUserJpaRepository.totalVoucherByUserId(userId);
		if(totalVoucherByUserId == null) {
			totalVoucherByUserId = 0; 
		}
		return totalVoucherByUserId;
	}

	@Override
	public Integer totalVoucherNoUsedByUserId(Integer userId) {
		Integer totalVoucherByUserId = voucherUserJpaRepository.totalVoucherNoUsedByUserId(userId);
		if(totalVoucherByUserId == null) {
			totalVoucherByUserId = 0; 
		}
		return totalVoucherByUserId;
	}

	@Override
	public VoucherUser getVoucherCanUse(Integer userId) {
		try {
			PageRequest pageable = new PageRequest(0, 1 , new Sort(new Order(Direction.DESC, "toDate"), new Order(Direction.ASC, "voucher.typeVoucher")));
			List<VoucherUserEntity> list = voucherUserJpaRepository.listVoucherCanUse(userId, pageable);
			return voucherUserServiceMapper.mapVoucherUserEntityToVoucherUser(list.get(0));
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

}
